In java, primitive data types are the most basic data types;

The eight primititive data types in java are the following:

-Whole number:
byte
short
int 
long

-Real number(floating point or decimal):
float
double

-single character:
char

-boolean value:
boolean

Remember that primitive types are simply placeholders in memory for a value

-----------------------------------------------------------------------------
-Each data type has a range:

int myMinIntValue = Integer.MIN_VALUE;  //assigning the minimum value possible to an int (-2147483648)
int myMaxIntValue = Integer.MAX_VALUE; //assigning the maximum value possible to an int (2147483647)

------------------------------------------------------------------------------------------
Classes

- A class is a building block for object-oriented programming, and it allows us to build custom data-types

----------------------------------------------------------------------------------------------
Wrapper class

- Java uses the concept of a wrapper class, for all it´s eight primitive data types.

- A wrapper class provides simple operations, as well as some basic information about 
the primitive data-type, which cannot be stored on the primitive itself.

- We saw that MIN_VALUE, and MAX_Value, are elements of this basic information, for the int data type

Primitive:

-Whole number:
byte                                                      
short
int 
long

-Real number(floating point or decimal):
float
double

-single character:
char

-boolean value:
boolean


-Wrapper Class:

byte
Short
Character
Integer
Long
Float
Double
Boolean

-----------------------------------------------------------------------------------------------------------

What happens if we try to add 1 to the max int value

System.out.print("Busted Max Value = " +(myMaxIntValue + 1));
Output: Busted Max Value = -2147483648

-We have assigned the maximum value plus one to it, so how is it possible the outcome is negative

- This is called an overflow (we tried to put a larger number than the allowed into the space allocated by the 
computer for an integer). Now it didn´t fit but the computer tried to fit it anyway (instead of throwing and error)
and by doing that it overflowed.


What happens if we try to subtract 1 of the min int value

System.out.print("Busted Min Value = " +(myMinIntValue - 1));
Output: Busted Min Value = 2147483647  (Underflow)


Overflow and Underflow in Java

- If you try to put a largen than the maximum value into an int, you will create something called and overflow
situation.

-And similarly, if you try to put a value smaller than the minimum value into an int, you cause an Underflow
to occur

- The maximum value, when it oveflows, wraps around to the minimum value, and just continues processing without an
error

- The minimum value, when it underflows, wraps around to the maximum value, and continues processing

-This is not usually behavior that you want, and as a developer, you need to be aware that this can happen, 
and choose the appropriate data type.

--------------------------------------------------------------------------------------------------------------------------
When will you get and overflow? When will you get an error?

-An integer wraparound event, either an overflow or underlow, can occur in java when you are using expressions
that are not a simple literal value

- The java compiler doesn´t attempt to evaluate the expression to determine its value, so it DOES NOT give you an error


-Here are two more examples that will compile, and result in an overflow. 
int thisWillCompile =  (Integer.MAX_VALUE + 1);
int thisWillCompile = (2147483647 + 1);


- If you assign a numeric literal value to a data type that is outside of the range, the compiler DOES give you and error
int thisWontCompile = 2147483648;
-----------------------------------------------------------------------------------------------------------------------
What does an underscore mean in a numeric literal?

In java, you cannot put commas in a numeric literal.

int myMaxIntTest = 2,147,483,647;

-So Java provided an alternative way to improve readability, the underscore.

int myMaxIntTest = 2_147_483_647;

==============================================================================================================================

We´ll take a look at the other three whole number primitive data types besides the int(byte, short and long)

byte| Byte | Has the smallest range

short| Short | .................

int| Integer |Java´s default data type for whole numbers

long | Long | Has the largest range

----------------------------------------------------------------------------------------------------------
 byte Value Range(-128 to 127)

 -A smaller data type takes up less space and can be quicker to acess. However this is less of a concern today
 because of speed of modern computers, but certainly was a factor when Java was first created

 -Another reason to use a byte instead of an int is if you wanted to document that you are only expecting or using
 a small range of values

 ----------------------------------------------------------------------------------------------------------------

short Value Range(-32768 to 32767)
(overflow and underflow works the same way)
------------------------------------------------------------------------------------------------------------
Size of Primitive Types and Width

- Size or Width, is the amount of space that determines(or limits) the range of values we´ve been discussing

A byte, can store 256 numbers and occupies eight bits, and has a width of 8.

A short can store a large range of numbers and occupies 16 bits, and has a width of 16

An int, has a much larger range as we know, and occupies 32 bits, and has a width of 32 (Integer.SIZE)

-------------------------------------------------------------------------------------------------------------------
long myLongValue = 100;

-The number 100 by default, is an int.

- Java allows certain numeric literals to have a suffix appended to the value, to force it to be a different data type
from the default type.

- The long is one of these types and it´s suffix is an 'L'.

- This is one of the few instances that java is not case sensitive, a lowercase 'l' or an uppercase 'L'
at the end of a whole number mean the same thing - the number is a long

- When you are assigning a long literal value to a variable, you need to put the letter L on the end of it, and it tells
the computer that it´s a long Value. Java will default literal whole numbers to be integer data types

- so in this line "long myLongValue = 100;" 100 is really an int being assigned to a long variable type

- Let´s make it more clear for the people that will be reading our code

- long myLongValue = 100L

- long has a width of 64

System.out.println("A long has a width of "+ Long.SIZE);
output: A long has a width of 64  (2 ^64)
-----------------------------------------------------------------------------------------------------------------------

How big is the difference between int and long?

- The long has the same type of overflow and underflow problem (same for every data type)

- The 'L' character lets Java know , you really did mean for the number to be treated as a long

- It turns out, in some circumstances, we don´t have to use the L suffix

let´s assign the value of 100 to myLongValue but without using the L suffix this this thisWillCompile

 - myLongValue = 100;

The reason this works is that an int will always fit into a long data type, because a long is thisWillCompile
it´s width, so Java is smart enough to know that. Java will convert an int to a long, instead of giving us
an error. BUT if we try to type in a literal value, for a number that is bigger than an int can handle, without
the long sufix 'L' we´ll get an error.

long bigLongLiteralValue = 2_147_483_647;  (that is the max integer number)

bigLongLiteralValue = 2_147_483_647_243;  (Integer number too large)

- Java is telling us it´s still treating that number as an integer.

-------------------------------------------------------------------------------------------------------------------------

When is L required 

- A numeric literal that  exceeds Integer.MAX_VALUE must use the 'L' suffix.

- We cannot create a numeric literal in Java, that exceeds Integer.MAX_VALUE, without using the 'L' suffix.
Or we will always get the error 'Integer number is too large'

---------------------------------------------------------------------------------------------------------------------
 Java is also smart, when it comes to converting numbers, from an int data type to something smaller, like a short
 type. Java can determine if the numeric literal value we´re going to use, is not going to fit into the short variable.

short bigShortLiteral = 32768;
error: incompatible types: possible lossy convertion from int to short

- "incompatible types". It requires a short, but found an int and the value of the int doesn´t fit into a short
data type(whose max value is 32.767)

==============================================================================================================================

- In the last video, we were introduced to three new data types - the byte, the short, and the long.

- We´ll be using these additional types in some basic arithmetic

- We´ve already done some math using integers, but now we´ll be using these other data types.

- We´ll finish with a discussion about casting which is a way to get Java to treate a variable of one type
like a different data type.

- We´ll talk about when and why casting is sometimes necessary in Java Code.


short myMinShortValue = Short.MIN_VALUE; int myMinIntValue = Integer.MIN_VALUE;

byte minByteValue = Byte.MIN_VALUE, myMaxByteValue =  Byte.MAX_VALUE;


-Rules for declaring multiple variables in one statement

- You cannot declare variables with different data types in a single statement.

- If you declare multiple variables of the same data type in a single statement, you must specify the
data type only once before any variable names


Let´s break the rules and see what happens. First we will try to declare two data types in the same statement:

short firstShort = 1, int firstInteger = 2; (error)

to solve, simply separate in two statements in the same line by using a semicolon
short firstShort = 1; int firstInteger = 2; 


Let´s break the second rule by declaring the type more than once:

byte firstByte = 1, byte secondByte = 2; (error)

-The problem here is the second byte data type declaration

-two ways to solve:

1) byte firstByte = 1; byte secondByte = 2; (separate into two statements)

2) byte firstByte = 1, secondByte = 2; (declare the type once)


- Remember that, putting more than one statement on a single line is perfectly legal in Java. A statement
needs to end in a semi colon, and multiple statements  cannot be separated by commas.

int myTotal =  (myMinIntValue / 2);

- That is just a simple bit of math that takes the value in the variable myMinIntValue and divides by 2.

- The new variable myTotal of type int gets the result of the division without any issues



Let´s try the exact same thing, but this time, with the byte data type, creating a new variable of type byte,
called myNewByteValue


byte myNewByteValue = (myMinByteValue / 2);
error:  incompatible types: possible lossy convertion from int to byte

- Why have we got an error? We know that the value of the result of that division operation should be in
the for a byte.

-The java compiler does not attempt to evaluate the value, in a variable, when it´s used in a calculation, so it
doesn´tknow if the value fits, and throws an error.
byte myNewByteValue = (myMinByteValue / 2);

- If your calculation uses literal values, java can figure out the end result at compile time, and whether it fits
into the variable, and won´t throw an error if it does.
byte myNewByteValue = (-128 / 2);

- In both examples an int is being returned from the calculation, but in the second example, Java knows the returned
value can fit into a byte.


We know that is we simply assign a literal value to a byte variable, and the literal value fits, there´s no problem.
But here (byte myNewByteValue = (myMinByteValue / 2);) we got an expression that uses a variable that´s been divided by
two. That is the difference compared to what we´ve done previously, when we used a literal value. Java can make assumptions
about literal values, that it can´t make about expressions with variables. THIS PROBLEM COMES ABOUT because the default whole
number used by java is an int, and that is why we got an error here.



byte myNewByteValue = (myMinByteValue / 2);
error:  incompatible types: possible lossy convertion from int to byte

- So basically what´s in the parentheses, is treated as an int by the computer, and that´s why we´re getting this error.

- But we definitely know the expression will result in a number that fits. So how do we let Java Know?

- We will do that with a concept called casting.

- Casting means to treat or convert a number from one type to another. We put the type we want the number to be, in parentheses
like this:

(byte) (myMinByteValue / 2);

other languages have casting too, this is a common practice and not just a java thing

byte myNewByteValue = (byte) (myMinByteValue / 2);


- Because we´ve used this cast, we´ve told Java, to treat this value, following the parentheses (byte) as a byte
and the error disappears.

- We´re being really specific in telling Java that this is a byte, so treat this as a byte instead of the default,
which was an integer. And we can do exactly the same thing for a short.

short myNewShortValue = (myMinShortValue / 2);
error: incompatible types: possible lossy conversion from int to short

-It´s requiring a short, and found an int data type again

short myNewShortValue = (short)(myMinShortValue / 2);
---------------------------------------------------------------------------------------------------------------------
What does it mean when Java defaults the data type of whole numbers to an int?

-So, what effect does int, being the default value, have on our code?

-Looking at the scenarios we just looked in summary, we know to following:

This statement works because the result is an int, and assigning it to an int variable is fine.
int myTotal = (myMinIntValue / 2);


This statement doesn´t work, because the expression (myMinShortValue / 2) is an Int, and an int can´t be assigned to a short,
because the compiler won´t guess the result.
short myNewShortValue = (myMinShortValue / 2);


This statement works because the result of (-128 / 2) is an int, but when calculations use only literal values, the compiler
can determine the result immediattely, and knows the value fits into a short.
short myNewShortValue = (-128 / 2);


and finally, this code works because we tell the compiler we know what we´re doing by using this cast, and the compiler
doesn´t give you an error.
short myNewShortValue = (short)(myMinShortValue / 2);


Generally Speaking, an integer is the wole number you are most likely to use in many cases, and you can probably guess that 
now, because java uses the int by default. That´s more or less telling us that´s what it´s expecting to use most of the time.
Because an integer is assumed automatically by Java, you saw that in these cases, we got an error when we were assigning calculations
to smaller data types. 

=======================================================================================================================================
Primitive types challenge:

Your challenge is to create four new variables:

- A byte variable, set it to any valid byte number, it doesn´t matter.

- A short  variable, set it to any short number.

- An int variable, set it to any valid integer number

- Lastly, cvreate a variable of type long. Make it equal to 50.000 plus 10 times the sum of the other variables.

byte byteValue = 10;
short shortValue = 20;
int intValue = 50;

long longTotal = 50000L + 10L * (byteValue + shortValue + intValue);        longTotal --> 50800
----------------------------------------------------------------------------------------------------------------
Another way of doing it

byte byteValue = 10;
short shortValue = 20;
int intValue = 50;

int sumOfThree = byteValue + shortValue + intValue;    (works because variables are treated as int)      sumOfThree --> 80

longTotal = 50000L + (10 * sumOfThree);         longTotal --> 50800
---------------------------------------------------------------------------------------------------------------------

Using parentheses

-Parentheses are another way to make your code more readable.
longTotal = 50000l + (10 * sumOfThree);

-They also make it clear which calculation should be done first.

- I also did not include the L suffix in the numeric literal 10 in this example. Remember that 'L' is optional if the value
is less than the integer maximum value. You can include it as a way of creating self documenting code for future readers but
it works just the same without it in this instance.

- Also notice how we didn´t need to do any casting. This is because the right side produced a long, because we used a long literal
in the first part of the equation(50000L), so in this instance, the result is a long.

but what if we wanted to do something similar to a short?

--------------------------------------------------------------------------------------------------------------------------
short shortTotal = (1000 + 10 * (byteValue + shortValue + intValue));
error: possible lossy convertion from int to short

short shortTotal = (short)(1000 + 10 * (byteValue + shortValue + intValue)); (now it works)

The point of this, after solving the challenge, was to suggest that integer is the best primitive data type for whole numbers
generally. But even if you´re using type long, you saw that Java handles a lot of the complexity for you, and you don´t need
to do this casting with a long

==============================================================================================================================

Floating-point Numbers

- Unlike whole numbers, floating-point numbers have fractional parts that we express with a decimal point.

Whole number examples:
3
100000
-2147483649L

Floating point examples:
3.14
10.0
-0.666666666666666666667

- Floating point numbers are also known as real numbers
-------------------------------------------------------------------------------------------------------------------

We use a floating number when we need more precision in calculations.

- There are two primitive types in java for expressing floating point numbers, the float and the double.

- The double is Java´s default type for any decimal or real number

- A double can work with a much bigger range of numbers, and it´s a lot more precise than the float.

- but of course, on the other hand, it needs twice the amount of memory, 64 bits or eight bytes, to store that number compared
to the float, which require 32 bits or 4 bytes, to store its number

----------------------------------------------------------------------------------------------------------------

- Earlier we learnt that the letter 'L' is used in a whola number literal, if the value is greater than the int´s max value, or smaller
than the int´s min value, to specify a long value. The suffix is optional otherwise, but you might want to use it to self-document code.

important: the double data type is java´s default type for real numbers.

- for example: any number with a decimal is a double.

- So 10.5 is a double by default in Java.

- The double data type can be specified as a numeric literal with a suffix of either lowercase 'd' or uppercase 'D', but because doubles
are the default in Java, the suffix is optional to use.

- The float data type can be specified as a numeric literal with a suffix of lowercase 'f', or uppercase 'F'. This suffix is required
if you are assignining a real number to a variable that was declared with a float type



int myIntValue = 5;
float myFloatValuw = 5;
double myDoubleValue = 5;

- Notice that we haven´t put anything on the end of any of the numbers 5´s. What i mean is, we haven´t included a suffix
in the numeric literal that we assigned to any of these variables. We just used the simple literal 5. You can see that we
did not put and 'F', 'D' or any suffix there and that´s been executed just fine.

- What this means is, we can assign an integer literal to both a float and a double variable. You can put a F or D to confirm
the data type. It´s a good practice to do that i general if you´re typing literal numbers to make it abundantly clear what you 
intend them to be.

float myFloatValue = 5f;
double myDoubleValue = 5d;

- You might have noticed that we got the same output whether we used suffixes or not, when we we assigned a whole number
literal to these variables. That works fine for a whole number, but you´ll find that if we add a decimal and remove the 'f'
we will actually get an error.

float myOtherFloatValue = 5.25;
error: incompatible types: possible lossy conversion from double to float

- The reason we get this error is, as previously pointed out, the double is the default floating point number in Java, so here,
we´ve got a similar problem. You can see that java doesn´t like trying to put a double into a float variable type. In this case,
the literal value that we´ve typed in, 5.25, is being interpreted as a double.


Challenge: Thinking back to our discussion os casting how you think you´d do the same for the float to remove this error?

float myOtherFloatValue = (float) 5.25;           

-We are telling Java yes, this is a literal double that has been typed here, but i wan´t you to treat it as a float

- this is not recommended to do for a couple reasons. Firstly, floats aren´t usually  recommended to be used much these days.
Double is the preferred floating point data type to use. But secondly, it´s a lot clearer to just add the letter 'F', right at
the end

float myOtherFloatValue = 5.25f; 



- Not everyone realizes that Java´s default type for a decimal literal is a double, which is larger and more precise than a float.

- Java likes to put a similar code in its code segments on exam questions, to what we saw earlier, omitting that 'f' suffix. without
your compiler od IDE, this statement can look fairly innocuous.

    float myotherFloatValue = 5.25;

- The number 5.25 is a double, so assigning it to a float will raise an error.

- this is a gift question to an exam taker, if you can easily spot this compiler error.

- Just remember, in Java, a decimal number literal is a double. a float is less precise than a double, so you cannot just
assign a less precise value to a more precise variable type without using a suffix or explicit cast.

========================================================================================================================================
 We´ll take a look at the differences in precision when using arithmetic.

int myIntValue = 5; myIntValue --> 5

float myFloatValue = 5f;  myFloatValue -- > 5.0

double myDoubleValue = 5d;  myDoubleValue -- > 5.0


myIntValue = 5 / 2;
myIntValue -- > 2

- Java uses a rather complex process, when determining what type of data to output from calculations, based on the types of numbers
used in the equation. Because both 5 and 2 are integers the result is an integer value and the value is two


- Let´s try something similar with a float variable: 

myFloatValue = 5f / 2f;
myFloatValue -- > 2.5

As we expected, because we used the division operator on two floats(the suffix made these numeric literals floats here). In this
case, Java returns a float, so we do not need to cast the result.

- And let´s use a similar equation, with double literals, and assigning to our variable

myDoubleValue = 5d / 2d;
myDoubleValue -- > 2.5


- We´ll change the divisor, which is the number we are dividing by, from 2 to 3.

myIntValue = 5 / 3;
myIntValue = 1;

myFloatValue = 5f / 3f;
myFloatValue -- > 1.6666666 (7 decimal places)

myDoubleValue = 5 / 3;
myDoubleValue -- > 1.6666666666666667 (16 decimal places)



myDoubleValue = 5.00 / 3.00
myDoubleValue -- > 1.6666666666666667 (16 decimal places)
We don´t need the 'd' suffix, remembering that Java will automatically look at a decimal number and assume it´s a double


- let´s take a moment here to change one of the operands to a literal int, leaving the other operand as a double decimal number
myDoubleValue = 5.00 / 3.00
myDoubleValue -- > myDoubleValue -- > 1.6666666666666667

As long as one of the operands is a double, your result will be a double. This won´t work for your float variable


myFloatValue = 5.00 / 3f;
error: incompatible types possible lossy conversion from double to float

So here. even though one of our literals is a float (3f) the other is a double(5.0) and the result is a double and you cannot
assign a double to a float variable

- So you might be thinking that given the fact that double takes up double the amount of space compared to float, that perhaps
you should be using the float data type. However, the double primitive type, in this case, is recommended.
----------------------------------------------------------------------------------------------------------------
Why should we choose double?

1) It´s actually faster to process on many modern computers. That´s because computers have, at chip level,
the functionality to actually deal with these double numbers faster than the equivalent float.

2) The Java libraries that we´ll get later i  the course, particularly math functions, are often written to process doubles
and not floats, and to return results as a double.

3) Java selected the double because it´s more precise, and it can handle a larger range of numbers.
------------------------------------------------------------------------------------------------

Floating point number precision tips.

In general, float and double are great for general floating point operations.

But neither should be used when precise calculations are required - this is due to a limitation with how floating point
numbers are stores, and not a Java problem as such

Java  has a class called BigDecimal that overcomes this.

===========================================================================================================

The char and the boolean primitive data types

char myChar = 'D'

- that could be any single character

- It is important to understand that the char is different from a string.


If you recall, we´ve used literal strings before, and that´s where we´ve typed some text in double quotes.
System.out.print("Hello World");

Differences between the char and the String:

char:

- Holds one, and only one character
- Literal enclosed in Single quotes


String:

- Can hold multiple characters
- Literal enclosed in Double Quotes



- The char occupies two bytes of memory, or 16 bits, and thus has a width of 16

- The reason it´s not just a single byte, is that a char is stores as a 2 byte number, similar to the short

- This number gets mapped to a single character by Java

- So, when you print a char you will see the mapped character and not the representative number 

- In some instances, characters aren´t represented of the keyboard, or you may have a reason to use special characters
in other languages. To do this, java suports a unicode value for characters, which you can use to seta  char value.

Unicode:

Unicode is an internacional encoding standard for use with different languages and scripts by which each letter, digit,
or symbol is assigned a unique numeric value that applies across different platforms and programs.

- The way it works, is that by using a combination of the two bytes that a chat takes up in memory, it can represent
any one of the 65.535 different types of characters


How do we use unicode in Java char?

char myUnicode = '\u0044';   (this code represents the letter D)
char myUnicode = 68 (this integer represents the letter D)
---------------------------------------------------------------------------------------------------------------------------------
 Boolean primitive type

 A boolean value allows for two oposite choices, true or false, yer or no, 1 or 0.

 In java terms, we´ve got a boolean primitive type, and it can be set to two values only, either true or false.

 The wrapper for boolean is Boolean.

 boolean isCustomerOverTwentyOne = true;

- Here are some example boolean variable names, such as isMarried and hasChildren, that clearly define what condition is being tested

isEligigleForDiscount
isMarried
hasChildren .....
==========================================================================================================================
Primitive types recap and the String data type


















































