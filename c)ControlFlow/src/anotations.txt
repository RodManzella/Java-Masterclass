The switch statement

Switch(value){
    case x:
        //code for value x
        break,

    case y:
        // code for value y
        break;
    default:
        // code for value not equal to x or y
}

Another important thing to know, is that the switch statement can only be used with a limited type of variable data types.


Valid Switch Value types:

----------------------------
byte, short, int, char

Byte, Short, Integer, Character

String

enum
-------------------------------

important: Cannot use long, float, double or boolean or their wrappers.


Fall through in switch statement

Once a switch case label matches the switch variable, no more cases are checked.

Any code after the case label where there was a match found, will be executed, until a break statement, or the end
of the switch statement occurs.

Without a break statement, execution will continue to fall through any case labels declared below the matching one, and
execute each case´s code.

=======================================================================================================================================

More switch statement

since JDK 9, the switch has been undergoing enhancements, but to keep it backwars compatible, Java has introduced a new syntax
for the switch as shown below:

Traditional Swicth statement:

switch(switchValue){  //check the variable switchValue
    case 1:                                              
        System.out.println("Value was 1");
        break;  
    case 2:
        System.out.println("Values was 2");
        break;
    case 3: case 4: case 5:                           
        System.out.println("Was a 3, a 4 or a 5");
        System.out.println("Actually, it was a "+switchValue);
    default:
        System.out.println("Was not 1, 2, 3, 4, or 5");  
        }


Enhanced switch statement:

switch(switchValue){
    case 1 -> System.out.println("Value was 1");
    case 2 -> System.out.println("Value was 2");
    case 3, 4, 5 ->{
        System.out.println("Was a 3, a 4 or a 5");
        System.out.println("Actually, it was a "+switchValue);
    }
    default -> System.out.println("Was not 1, 2, 3, 4, or 5");  
}


-----------------------------------------------------------------------------------------------------------

Traditional switch statement  vs   Enhanced Switch Expression


 switch(month){
    case "JANUARY":
    case "FEBRUARY":
    case "MARCH":
        return "1st";
    case "APRIL":
    case "MAY":
    case "JUNE":
        return "2nd";
    case "JULY":
    case "AUGUST":
    case "SEPTEMBER":
        return "3rd";
    case "OCTOBER":
    case "NOVEMBER":
    case "DECEMBER":
        return "4th";
}
 return "bad";





    return switch (month){
            case "JANUARY", "FEBRUARY", "MARCH" -> "1st";
            case "APRIL", "MAY", "JUNE" -> "2nd";
            case "JULY", "AUGUST", "SEPTEMBER" -> "3rd";
            case "OCTOBER", "NOVEMBER", "DECEMBER" -> "4th";
            default -> "bad";
        };


We can see that the multiple case keyword have been removed, for a comma delimited list, and the colon is replaced with an arrow token,
so this looks a lot like the enhanced switch statement. But look at the right side of the arrow token, it´s just a String literal. This
isn´t a statement at all. This  code only compiles because we´re using it as an expression, meaning we´re using the result. In this case,
we´re simply returning the result from the method, but we just as easily have assigned it to a local variable. The other important difference
is this default label. When the enhanced switch is an expression, meaning it returns a value, then a default label is required under most 
conditions. We´ll be talking about the exception to this rule later, when we use the switch with the last special type it supports, the enum.
But in all other cases, default is required when the statement is used as an expression. So let´s test these statements in our code.

--------------------------------------------------------------------------------------------------------------------------------------

When to use yield in a switch:

Your switch statement is being used as a switch expression returning a value

    This code                is implicitly translated to 

    -> "1st"                    