The switch statement

Switch(value){
    case x:
        //code for value x
        break,

    case y:
        // code for value y
        break;
    default:
        // code for value not equal to x or y
}

Another important thing to know, is that the switch statement can only be used with a limited type of variable data types.


Valid Switch Value types:

----------------------------
byte, short, int, char

Byte, Short, Integer, Character

String

enum
-------------------------------

important: Cannot use long, float, double or boolean or their wrappers.


Fall through in switch statement

Once a switch case label matches the switch variable, no more cases are checked.

Any code after the case label where there was a match found, will be executed, until a break statement, or the end
of the switch statement occurs.

Without a break statement, execution will continue to fall through any case labels declared below the matching one, and
execute each case´s code.

=======================================================================================================================================

More switch statement

since JDK 9, the switch has been undergoing enhancements, but to keep it backwars compatible, Java has introduced a new syntax
for the switch as shown below:

Traditional Swicth statement:

switch(switchValue){  //check the variable switchValue
    case 1:                                              
        System.out.println("Value was 1");
        break;  
    case 2:
        System.out.println("Values was 2");
        break;
    case 3: case 4: case 5:                           
        System.out.println("Was a 3, a 4 or a 5");
        System.out.println("Actually, it was a "+switchValue);
    default:
        System.out.println("Was not 1, 2, 3, 4, or 5");  
        }


Enhanced switch statement:

switch(switchValue){
    case 1 -> System.out.println("Value was 1");
    case 2 -> System.out.println("Value was 2");
    case 3, 4, 5 ->{
        System.out.println("Was a 3, a 4 or a 5");
        System.out.println("Actually, it was a "+switchValue);
    }
    default -> System.out.println("Was not 1, 2, 3, 4, or 5");  
}


-----------------------------------------------------------------------------------------------------------

Traditional switch statement  vs   Enhanced Switch Expression


 switch(month){
    case "JANUARY":
    case "FEBRUARY":
    case "MARCH":
        return "1st";
    case "APRIL":
    case "MAY":
    case "JUNE":
        return "2nd";
    case "JULY":
    case "AUGUST":
    case "SEPTEMBER":
        return "3rd";
    case "OCTOBER":
    case "NOVEMBER":
    case "DECEMBER":
        return "4th";
}
 return "bad";





    return switch (month){
            case "JANUARY", "FEBRUARY", "MARCH" -> "1st";
            case "APRIL", "MAY", "JUNE" -> "2nd";
            case "JULY", "AUGUST", "SEPTEMBER" -> "3rd";
            case "OCTOBER", "NOVEMBER", "DECEMBER" -> "4th";
            default -> "bad";
        };


We can see that the multiple case keyword have been removed, for a comma delimited list, and the colon is replaced with an arrow token,
so this looks a lot like the enhanced switch statement. But look at the right side of the arrow token, it´s just a String literal. This
isn´t a statement at all. This  code only compiles because we´re using it as an expression, meaning we´re using the result. In this case,
we´re simply returning the result from the method, but we just as easily have assigned it to a local variable. The other important difference
is this default label. When the enhanced switch is an expression, meaning it returns a value, then a default label is required under most 
conditions. We´ll be talking about the exception to this rule later, when we use the switch with the last special type it supports, the enum.
But in all other cases, default is required when the statement is used as an expression. So let´s test these statements in our code.

--------------------------------------------------------------------------------------------------------------------------------------

When to use yield in a switch:

Your switch statement is being used as a switch expression returning a value

    This code                is implicitly translated to 

    -> "1st";                 {yield "1st";}     // yield statement has to be in a code block {}


Generally, if all you´re doing is returning the value from one of your cases, you´ll just put the value that is returned.
But if you´re making calculations, or doing some other work, you can use a code block, but you´re then required to use yield
before you return the value back.

===========================================================================================================================================

Looping

Looping lets us execute the code a multiple number of times.

There are several looping statements in Java. These statements will continue to execute a code of block repetively,until a condition, or
some set of conditions is met.



Java supports three statements for looping:

    for: The for loop is more complex to set up, but is commonly used when you are iterating over a set of values.

    while: The while loop executes until a specified condition becomes false.

    do while: The do while loop always executes at least one and continues until a specified condition becomes false.


-----------------------------------------------------------------------------------------------------------------------
The for statement

The for statement is often referred as the foor loop.

It repeatedly loops something until a condition is satisfied.


    for(init; expression; increment){
        // block of statements
    }

There are three parts of the basic statement´s declaration.

    These are declared in parentheses, after the for keyword, and are separated by semi-colons.

    These parts are all optional and consist of the following:

        The initialization section declares or sets state, usually declaring and initializing a loop variable, before the loop 
        begins processing.

        The expression section, once it becomes false, will end the loop processing.

        The increment section is executed after the expression is tested, and is generally the place where the loop variable is incremented.


-----------------------------------------------------------------------------------------------------------------------------------------------
Other ways to loop

What if you want to loop until some condition is met, that´s not associated with a known range of values?


Java has two types of while loops:

    while: Continue executing code block until the loop expression becomes false.

    do while: Execute the code block once, then continue executing until the loop condition becomes false.


continue

    The continue statement, in it´s simplest form, will stop executing the current iteration of a block code in a loop, and start a new iteration.

----------------------------------------------------------------------------------------------------------------------------------------------------------
Local variables and scope:

    In the past couple of videos, we´ve looked at many of Java´s flow statements, the switch statement, the for statement, the while
    statement, as well as the do while statement.

    In previous videos, we covered the if then else statement.

    All of these statements may, and probably will have their own code blocks.

    We´ve talked about code blocks quite a bit, but we haven´t really talked about variables declared locally to many of these blocks.


Local variable

    A local variable is called local, because it is available for use by the code block in which was declared.

    It is also available to code blocks that are contained by a declaring block.


    {
        int firstVariable = 5;
        int secondVariable = 10;

        if(firstVariable > 0){ // flow statement block starts inner block
            
            // Inner block code has acess to outer block´s variables
            System.out.println(secondVariable);
        }
    }


Scope

    Scope describes the acessibility of a variable.

    'In scope' means the variable can be used by an executing block or any nested any nested blocks.

    'Out of scope' means the variable is no longer available.



When are Local Variables in Scope?

    Local variablea are always in scope, in the block they are declared.

    They are also in scope for any nested blocks, or blocks contained within the outer block.

    For example, a method block can declare local variables, and any flow statements contained in the method block will have
    acess to the method´s local variables. This is also true for the method parameters. Any code in the method, and any nested
    blocks have acess to the parameters. There is no limit to how deep you can nest code blocks, but generally, for readability
    and maintainability, consider  replacing deeply nested blocks with method calls.



When are Local Variables out of Scope?

    Local variables are always out of scope, for outer blocks, or the containing blocks they are declared in.



    public static void aMethod(boolean aBoolean){

        if(aBoolean){
            int myCounter = 10;    //myCounter is local to this if block
        }
        System.out.println(myCounter);   //myCounter is out of scope here
    }



Scope best practices

    It is considered best practice:

        To declare and initialize variables in the same place if possible.

        And to declare variables in the narrowest scope possible(If you´re variable is only used in a nested block, declare it there)

        Example: if you are using a variable only in a loop code block, like the iteration variable, and won´t be using it
        outside of the loop block, declare it in the loop code, or in the for loop initialization block.




Local variables and the For statement

    In this for statement, as part of the declaration, there is an initialization part, as we´ve described.

    In this case, we declared a variable i, that isn´t acessible outside of the loop.

    this is because any variables declared in the init section, are local to the loop, meaning they exist and are acessible
    in memory, only while the loop is executing, and only to the loop code block.


    {  //Starts outer code block - for example a method block

        for(int i = 1; i < 5; i++){   // i declared in for loop declaration
            System.out.println(i);
        }
        System.out.println(i);  //ERROR! this i is out of scope

    }




    let´s show for the if statement aswell:

    Local variables declared in an if statement block, are not acessible outside of that block.

    This also includes other parts of the if statement, like the else if block. or the else block.


    public static void aMethod(int counter){
        if(counter > 0){
            int i = 10;
        }
        else{
            System.out.println(i);    // ERROR: i is out of scope
        }

        System.out.println(i);   // ERROR: i is out of scope
    }



Declaring variables in a switch statement block

    However, the switch statement is different from the if then else statement blocks.

    Consider the code below:

        public static void aMethod(int value){
            
            switch (value){

                case 1:
                    int i = 10;
                    break;
                default:
                    i = value;  // this is ok
                    System.out.println(i);  // this is ok
                    break;
            }
            Sustem.out.prinln(i);  // Error: i is out of scope outside from switch.
        }


        So, the left and right braces are optional in a switch statement. The code block is whatever is after one case label, and
        before the next case label, including the break statement. However, the case block has different acess for local variables,
        than the if else block. In the switch statement, a variable declared in one case label code block can be acessed in another case
        label code block, but only if that block is after the declaration and initialization of the variable. As you can see here, in
        the default code block, we had acess to the variable i, and this did not cause an error.


        Let´s look at another example of code blocks and local variables in the switch statement.

        public static void aMethod(int value){
            switch(value){
                case 1:
                    System.out.println(i);   //This is NOT ok, because variable i was declared below
                    break;
                case 2:
                    int i = 10;
                    System.out.println(i);  //this is ok
                    break;
                default:
                    i = value;              //this is ok
                    System.out.println(i);  //this is ok
                    break;
            }

            System.out.println(i);  //ERROR: i is out of scope(outside of switch)
        }

==============================================================================================================================================
The class, the object, static & instance fields and methods


In the previous lesson, we talked about local variables and scope.

Local variables are a way to store and manipulate temporary data.

In addition to local variables, we can set up data to be defined, and used as part of a class, or an object.



First, attributes on classes are another way to store data.

Second, i want to introduce you to some static methods on the wrapper classes, which are classes we previously looked at, but we
haven´t used any methods on these classes yet.

These methods will help parse strings into numeric values.

And finally, i want to introduce you to a special class for reading input, which we´ll be using in the last part of this section, to
create an interactive program.

Before we use that class, it will help if we understand some very basic concepts with classes.


-----------------------------------------------------------------------------------------------------------------
A class

    A class can be described as:
     - A custom data type
     - A special code block that contains methods.


    A class is like an empty form. It describes information, or placeholders, for data that´ll be filled in when that form is given to A
    unique individual. The class may have a field for name, the object will have a value in the name field, which will be unique to the
    object. The class may have a field for address, the object will have values for the address field, and so on. The process of copying
    that empty form, and then delivering it to some process or person to fill in the blanks, is a loose analogy to what happens when you
    create an object.

    The empty form(the class) is the template for the data to be collected, The populated form(object) may be completely different each time
    because of the values used to fill in the data. But the data being collected each time, is determined by the class, or the form in this
    analogy.

    An object is called an instance of a particular class. In this course, we-ll often use the word instance interchangeably with
    object. 

    This means an object is created by instantiating a class.

    The class provides a shape, or framework, that describes the object being created.

----------------------------------------------------------------------------------------------------------------------------
Declaring and instantiating a new object from a class

    The most common way to create an object, is to use the new keyword
    
    The new keyword creates an instance, and you can sometimes pass data, when creating an instance to set up data on that object

    The String is special, because we can create a String, just by using a literal which we´ve seen.

    String s = "Hello";
    but we could also use new:
    String s = new String("Hello");

    Like other data types, you can assign this object´s memory location(address or reference) to a local variable, as we´ve done 
    with this String.

    We´ve assigned to the local variable s, an instance of String. All then manipulation of the object´s data and methods are then
    done using the local variable name.

    In both of these statements(String s = "Hello";  and  String s = new String("Hello"); ) ,we´re creating a new object of type
    String, and initializing it with the text "Hello", and assigning it to a variable named s. The second statement makes this a
    bit clearer. When we crate an object, we can pass initial data to be associated with it in parentheses.

    We´ve stated previously, that the class can be thought of as a special data type. This is because you can create variables on
    classes, and these are called fields, or attributes on the class or object. There are two ways to create fields on classes,
    one is with the static keyword, and the other is without the static keyword.


-----------------------------------------------------------------------------------------------------------------------------------
Static and instance fields


    When the STATIC keyword is used, it´s called a static field on the class. This means that the value of that field always stays
    with the class. It´s stored in a special memory location for values that aren´t changing constantly, unlike local variables and
    objects. In our form of analogy, this would be a field that is pre-populated on the form, and would not change for any of the
    copied forms. But unlike the form, this type of field in a class, doesn´t get copied down to the object. It maintains it´s single 
    value on the master copy, the class. The field in memory is acessed differently, because we can acess that field using the class name
    with dot notation, and we´ve done that already. When we´ve looked at wrappers, we acessed Integer.MAX_VALUE, Integer.MIN_VALUE, and
    Integer.SIZE for example. This data was stored on the class, and not on an instance of the class.


    When the static keyword isn´t used, it´s called an instance field. Until the class is instantiated, and an object created, the instance
    field has no place in memory. These instance fields can have different values for every instance created. This field is acessed using
    the variable name for the object, and the dot notation with the field name. In the same way there are static fields and instance fields,
    there are static methods and instance methods.
---------------------------------------------------------------------------------------------------------------------------------------------

Static and instance methods


    Again, the static keyword is used to differentiate these two kinds of methods.

    A static method can be called direcly using the Class name and dot notation. In other words, you don´t need an instance
    to use this method.

    Example: Integer.parseInt("123);
    A method called parseInt is called directly from the Class Integer.



    An instance method requires an instance existing firt, and then the method can be called on that instance.
    
    Method is acessed by ObjectVariable.methodname

    In the example below, i am showing that a String literal with a value "hello", is really an object of type String.

        "hello".toUpperCase();

    A method called toUpperCase is called on the instance of a String with value "hello"

    The String class has many instance methods defined on it, which we can use to manipulate Strings.

    I´ll be introducing you to a special class for reading input. With this class, we´ll be using instance methods on a Scanner object
    we create, to get input from a user. We´ll also be using special static methods, on wrapper classes, to parse numeric values out of
    Strings.

    =============================================================================================================================================
        
        


















