Keywords and expresisons

Java has actually got 51 reserved words, that are used for keywords in your applications.

A keyword is one of the 51 reserved words, that have a predefined meaning in the language.

Java actually uses the terminology character sequences to describe these now.

In addition to reserved keywords you´ll see that as of JDK 17, Java has 16 contextual keywords, which are only keywords
in special situations.

--------------------------------------------------------------------------------------------------------------------------------------------
Methods recap


-Java´s documentation states that: 

A method calls executable code that can be invoked, passing a fixed number of values as arguments.

Like some of the abbreviated operators we learned about, a method can be a statement or an expression in some instances.

Any method can be executed as a statement.

A method that returns a value can be used as an expression, or as part of any expression.


What are functions and procedures?

- Some programming languages will call a method that returns a value, a function, and a method that doesn´t return a value, a procedure.

 - You´ll often hear function and method used interchangeably in Java.

 The term procedure is somewhat less common, when applied to Java methods, but you may still hear a method with a void return type,
 called procedure.



- Declaring the method:

So there are quite a few declarations that need to occur as we create a method.

This consists of:

Declaring Modifiers. These are keywords in Java with special meanings, we´ve seen public and static examples, but there are others.



- Declaring the return type:

void is a Java keyword meaning no data is returned from a method.

Alternatively, the return type can be any primitive data type or class.

If a return type is defined, the code block must use at least one return statement, returning a value, of the declared type operators
comparable type.



- Declaring the method:

Declaring the method name. lower camel case is recommended for method names.

Declaring the method paramethers in parentheses. A method is not required to have parameters, so a set of empty parenthesis would
be declared in that case.

Declaring the method with opening and closing curly braces. this is also called the method body.



- Declaring the parameters:

Parameters are declared as a list of comma-separated specifiers, each of which has a parameter type and a parameter name (or identifier).

Parameter order is important when calling the method.

The calling code must pass arguments to the method, with the same or comparable type, and in the same order, as the declaration.

The calling code must pass the same number of arguments, as the number of parameters declared.



- Declaring the return type:

void is a valid return type, and means no data is returned.

Any other return type requires a return statement, in the method code block.


- The return statement for methods that have a return type

If a method declares a return type, meaning it´s not void, then a return type is required at any exit point from the method
block

Consider the method block shown here:

    public static boolean isTooYoung (int age){
        if(age < 21){
            return true;  
        }
    }

^^^^ this code won´t compile, because there´s no return statement to cover the cases where age is greater or equal
to 21

So in the case of using a return statement in nested code blocks in a method, all possible code segments must result
in a value being returned.


The following code demonstrates one way to do this:

    public static boolean isTooYoung (int age){
        if(age < 21){
            return true;  
        }
        return false;
    }

^^^^ This code is valid, because if age >=21, the code will return false in that instance.


One common practice is to declare a default return value at the start of a method, and only have a single return statement
from a method, returning that variable, as shown in this example method.

    public static boolean isTooYoung (int age){
        boolean result = false;
        if(age < 21){
            result = true;
        }
        return result;
    }

- The return statement for methods that don´t have a return type

The return statement can return with no value from a method, which is declared with a void return type.

In this case, the return statement is optional, but it may be used to terminate execution of the method, at some
earlier point than the end of the method block, as we show here:

    public static void methodDoesSomething (int age){
        if(age < 21){
            return;
        }

        // Do more stuff
    }



- The method signature

A method is uniquely defined in a class by it´s name, and the number and type of parameters that are declared for it.

This is called the method signature.

You can have multiple methods with the same method name, as long as the method signature(meaning the parameters declared are different).

This will become important later in this section, when we cover overloaded methods.


- Default values for parameters.

In many languages, methods can be defined with default values, and you can omit passing values for these when calling the method.

But Java doesn´t support default values for parameters.

There are work-arounds for this limitation, and we´ll be reviewing those at a later date.

But it´s important to state again, In Java, the number of arguments you pass, and their type, must match the parameters in The
method declaration exactly.


- Revisiting the main Methods

- The main method is special in Java, because Java´s virtual machine (JVM)









