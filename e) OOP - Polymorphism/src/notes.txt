Inheritance vs Composition

    - Inheritance defines an IS A relationship
    
    - Composition defines a HAS A relationship.


Next, let´s see how we´de use composition to create a personal computer.

    - PersonalComputer inherits from Product.

    - But a PersonalComputer, in addition to being a product, is actually made up of other parts.

    - The computer has a motherboard, a case, and a monitor.

    - The motherboard, the computer case, and the monitor aren´t computers, not in the same sense that they´re products.

    - So, that´s what composition is, it´s actually modelling parts, and those parts make up a greater whole.

    - In this case, we´re gonna model the personal computer.

    - And we´re modelling the has a relationshio, with the motherboard, the case, and the monitor.



We started talking about composition, and compared it to inheritance.

Inheritance is a way to reuse functionality and attributes.

Composition is a way to make the combination of classes, act like a single coherent object.





Composition is creating a whole from different parts

    - We built this personal computer, by passing objects to the constructor, like assembling the computer.

    - We can actually hide the functionality further.

    - In this case, we´re not going to allow the calling program, to acess those objects, the pargts, directly.

    - We don´t want anybody to acess the Monitor, Motherboatd, or ComputerCase directly.

----------------------------------------------------------------------------------------------------------------------------------------------

Use Composition or Inheritance or Both

    - As a general rule, when you´re designing your programs in Java, you probably want to look at composition first.

    - Most of the experts will tell you, as a rule, look at using composition before implementing inheritance.

    - You saw in this example, we actually used both.

    - All of our parts were able to inherit a set of attributes, like the manufacturer and model.

    - The calling code didn´t have to know anything about these parts, to get Personal computer to do something. It was able to tell the
      personal computer to power up, and the personal computer delegated that work to its parts.


Why is Composition preferred over Inheritance in many designs?

    The reasons composition is preferred over inheritance:

        - Composition is more flexible. You can add parts in, or remove them, and these changes are less likely to have a downstream effect.

        - Composition provides functional reuse outside of the class hierarchy, meaning classes can share attributes & behavior, by having
          similar components, instead of inheriting functionality from a parent or base class.

        - Java´s inheritance breaks encapsulation, because subclasses may need direct acess to a parent´s state of behavior.

        - We showed you an example of using the protected acess modifier in a previous video, and we´ll talk about why this breaks encapsulation,
          in the next videos on encapsulation.



Why is Inheritance less flexible?

    - Adding a class to, or removing a class from, a class hierarchy, may impact all subclasses from that point.

    - In addition, a new subclasse may not need all the functionality or attributes of its parent class.

===============================================================================================================================================

In Java, encapsulation means hiding things, by making them private or inacessible.

Why would we want to hide things in Java?

    - To make the interface simpler, we may want to hide unecessary details.

    - To protect the integrity of data on an object, we may hide or restrict acess to some of the data and operations.

    - To decouple the published interface from the internal details of the class, we may hide actual names and types of class members.


What do we mean by interface here?

Although Jav has a type called interface, that´s not what we´re talking about here.

When we talk about a class´s public or published interface, we´re really talking about the class members that are exposed to, or can be acessed by
the calling code.

Everything in the class is internal, or private to it.

An application programming interface, or API, is the public contract, that tells others how to use the class.

-----------------------------------------------------------------------------------------------------------------------------------------------

Encapsulation Principles

To create an encapsulated class, you want to:

    - Create constructors for object initialization, which enforces that only objects with valid data will get created.

    - Use the private acess modifier for your fields.

    - Use setter and getter methods sparingly, and only as neeeded

    - Use acess modifiers that aren´t private, only for the methods that the calling code needs to use.

==========================================================================================================================================

Polymorphism

    - Polymorphism lets us write code to call a method, but at runtime, this method´s behavior can be different, for different objects.

    - This means the behavior that occurs, while the program is executing, depends on the runtime type of the object.

    - And the runtine type, might be different from the declared type in the code.

    - The declared type has to have some kind of relationship to the runtime type, and inheritance is one way to estabish this relationship.

    - There are other ways, but in this video, we´ll talk about how to use inheritance, to support polymorphism.




This time, we´re going to look at a polymorphism example, using movies.

We´ll have a base class of Movie, which has the title of the movie.

And Movie will have one method, watchMovie.

We´ll have three subclasses, each with a different kind of movie.

We´ll have and Adventure film, a Comedy, and a Science fiction movie.

These are the different categories, so we´ll use these as the subclasses.

All of these will override and implememt unique behavior, for the watchMovie method.

=============================================================================================================================================

Polymorphism in action

That was polymorphism in action.

It´s the ability to execute different behavior, for different types, which are determined at runtime.

And yet, we did it with just two statements in the main method, as shown here:

    - Movie movie = Movie.getMovie(type, title);

    - movie.watchMovie();

Polymorphism enables you to write generic code, based on the base class, or a parent class.

And this code, in the main method, is extendable, emaning it doesn´t have to change, as new subclasses become available.

This code can handle any instances that are a Movie, or a subclass of movie, that are returned from the factory method.

=============================================================================================================================================

Run Time vs Compile Time Typing


    - You can think of the compile time type as the declared type

    - The type is declared either as a variable reference, or a method return type, or a method parameter, for example.

    - In the case of Local Variable Type Inference, we don´t declare a type for the compiled reference type, it gets inferred, but the byte
      code is the same, as if we had declared it.

    - In many cases, the compile time type, is the declared type to the left of the assignment operator.

    - What is returned on the right side of the assignment operaotr, from whatever expression or method is executed, sometimes can be determined
      at runtime, when the code is executing conditionally through the statements in the code.
    
    - You can assign a runtime instace, to a different compile time type, only if certain rules are followed

    - In this course, up to now, we´ve looked at only one rule that applies, and that´s the inheritance rule.

    - We can assign an instance to a variable of the same type, or a parent type, or a parent´s parent type, including java.lang.Object,
      the ultimate base class.

    - Why are runtime types different than compile time types?

    - Because of polymorphism

    - Polymorphism lets us write code once, in a more generic fashion, like the code we started this lecture with.

    - We saw that those two lines of code, using a single compile time type of Movie, actually supported four different runtime types.

    - Each type was able to execute behavior unique to the class.




