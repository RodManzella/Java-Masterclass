What is object oriented programming

    - Object oriented programming is a way to model real world objects, as software objects, which contain both data and code.

    - OOP is a common acronym for Object Oriented programming

Class-based programming

    - Class-based programming starts with classes, which become blueprints for objects.


State and Behaviour

    - Now, real world objects have two major coomponents: (state and behaviour)

    - State, in terms of a computer object, might be: The amout of RAM it has, the operating system it´s running, the hard drive size.

    - These are characteristics about the item, that can describe it.

    - Behaviour(computer): In addition to state, objects may also have a behaviour, or actions that can be performed by the object or upon the
      object. Behaviour, for a computer, might be things like: booting up, shuting down, outputing some form of sound, drawing something on the
      screen and so son.

    - So modelling real world objects as software objects, is a fundamental part of Object Oriented Programming.

    - Now, a software object stores its state in fields, which can also be called variables, or attributes.

    - And objects expose their behaviour with methods, which we-ve talked about before.

    - So, where does a class fit in?

    - Well, think of a class as a template, or blueprint for creating objects.

The class as the blueprint

    - The class describes the data(fields), and the behaviour (methods), that are relevant to the real world object we want to describe.

    - These are called class members.

    - A class member can be a field, or a method, or some other type of dependant element.

    - If a field is static, there is only one copy in memory, and this value is associated with the class, or template itself.

    - If a field is not static, it´s called an instance field, and each object may have a different value stored for this field.

    - A static method can´t be dependant on any one object´s state, so it can´t reference any instance members.

    - In other words, any method that operates on instance fields, needs to be non-static.
------------------------------------------------------------------------------------------------------------------------------------------------

Organizing classes

    -Classes can be organized into logical groupings, which are called packages.

    -You declare a package name in the class using a package statement.

    -If you don´t declare a package, the class implicitly belongs to the default package.

    - You do need to understand that classes are grouped into packages, to understand acess modifiers.


Acess modifiers for the class

    - A class is said to be a top-level class, if it is defined in the souce code file, and not enclosed in the code block of another class,
    type, or method.

    - A top level class has only two valid acess valid modifier options: public, or none.
        
        public: public means any other class in any package can acess this class.

        (empty): When the acess modifier is omitted, this class has special meaning, called package acess, meaning that the class is
                 acessible only to classes in the same package.


Acess modifiers for class members

    - An acess modifier at member level, allows granular control over class members.

    - The valid acess modifiers are shown in this table from the least restrictive, to the most restrictive

        public: public means any other class in any package can acess this class.

        protected: protected allows classes in the same package, and any subclasses in other packages, to have acess to the member

        (omitted): When the modifier is omitted(not specified), this class has special meaning, called package acess, meaning the member
                   is acessible only to classes in the same package.

        private: private means that no other class can acess this member

    - As a general rule, all your fields should be private, unlike the class, where we´ll usually use public. So why would we want to make
      all the fields on a class private? Doesn´t this mean that nobody can acess them? This practice has a name, encapsulation, and it´s A
      key fundamental rule of Object Oriented Programming.


Encapsulation


    - Encapsulation in Object Oriented Programming usually has two meanings.

    - One is the bundling(empacotamento) of behaviour and attributes on a single object.

    - The other is the practice of hiding fields, and some methods, from public acess.

    - In general, when we´re talking about encapsulation, we´re talking about information hiding, or hiding the internal workings of a 
      particular object. When we make our attributes private, we can then create methods to acess the data, with different degrees of
      acess allowed, as needed.

============================================================================================================================================
What is null?

    - null is a special keyword in Java, meaning the variable or attribute has a type, but no reference to an object.

    - This means that no instance, or object, is assigned to the variable or field.

    - field with primitive data types are never null.

    - So, why is the color, make, and model of the car null? Well, all of these fields were declared with the String data type, and we
      haven´t assigned values to them. We know from previous lectures that Strings are really objects, and not primitive data types,
      so Java assigned each a null reference.

    - the other thind i want you to notice about the output we got, was that doors was printed with the value 0(Car class) and that the world
      convertible wasn´t printed in the output. So, how is that possible? We didn´t set doors or convertible to any values in our class, but
      we didn´t get any erros when running this code. And now, we´re seeing another difference between local variables, and fields declared on
      a class.

    - And this is that a field with primitive data type, will get assigned a defaul value by Java.


Default values for fields on classes

    - Fields on clases are assigned default values, intrinsically by Java, if not assigned explicitly.

        boolean:                         defalt value assigned is false

        byte, short, int, long, char:    default value assigned is 0

        double, float:                   default value assigned is 0.0

        any other data type:             default value assigned is null
----------------------------------------------------------------------------------------------------------------------------------------------------

What are getters and setters? Why should we use them?

    - A getter is a method on a class, that retrives the value of a private field, and returns it.

    - A setter is a method on a class, that sets the value of a private field.

    - The purpose of these methods is to control, and protect acess to private fields.

    - Another important aspect, is that the getter and setter method signatures are part of car's public interface, but the attribute names
      and types aren´t. This means that we can chage things internally, like the name or type of an attribute, but as long as we use the
      same getter and setter method, these changes should  have no effect on code that uses our class. Our internal changes are hidden from
      our users.

    - A getter method usually just returns the value of a private attribute. It´s usual to name a getter method with the get prefix, followed
      by the field name, in lower camel case, but this is not required.

    - You could have getter methods for attributes that are not really declared on your class, but that are derived in some way.

    - A setter may simply just assign the argument passed to the attribute, but it often contains code to validate dara, check additional
      security requirements, ensure immutability of the field value, or any other code required to protect and validate an object´s state.

    - It´s usual to name a setter method with the set prefix, followed by the field name, in lower camel case, but again, this is matter of
      form. There may be cases where we won´t have any setter methods, for some of our private fields. Maybe this is data only needed within
      the class itself, and doesn´t need to be exposed to the outside world.

-----------------------------------------------------------------------------------------------------------------------------------------------
this keyword

     - this is a special keyword in Java.
     
     - What it really refers is to the instance that was cerated when the object was instantiated.

     - So "this" is a special reference name for the object or instance, which can be used to describe itself.

     - And we can use "this" to acess fields on the class.


Interesting details:

    Car car;
    car.setMake("Porsche");

    - We haven´t included the = new Car part. Already, IntelliJ is saying "Variable car may not have been initialized" where we are
      attempting to call the setter method, on the car variable. You can´t use an unitialized variable, which car is, because we haven´t
      assigned any object reference to it. But now, consider what happens, if we instead assign null to car
 
    Car car = null;
    car.setMake("Porsche");

    - So IntelliJ is not showing any erros when we do this, but let´s try running it.

        Exception in thread "main" java.lang.NullPointerExceptio: Cannot invoke "Car" at Main.main

    - We actually get an exception, NullPointerException, and the additional information that we can´t call a method, or invoke a method
      (instance method) on a null instance. And what that essentialy means, is we´ve defined a variable called car, but it doesn´t have a
      reference to a valid instance of a Car.
    
    - So we can´t run a method on a null, and we couldn´t set, or get attributes on a null.

    - So there´s a dinstinction here i want to point out, between an uninitialized variable, and a variable with a null reference.

    - An uninitialized variable, as we saw in the first instance, causes a compile time error. But a variable with a null reference can be
      be used in code, without compile errors, but will throw an expection at runtime.

    - So, in both of these scenarios, we haven´t created an object from the Car template, which of course is the class. So, that´s why you need
      to make sure that new is always executed. The bottom line i´m trying to say here is that, make sure when you´re creating objects, you always
      use the keyword new, and them include the name of the class, and then follow it with the parentheses.
=======================================================================================================================================================

Constructor

A constructor is used in the creation of an object, that´s an instance of a class.

It is a special type of code block that has a specific name and parameters, much like a method.

It has the same name as the class itself, and it doesn´t return any values.

You never include a return type from a constructor, not even void.

You can, and should, specify an appropriate access modifier, to control who should be able to create to create new instances of the class.



    public class Account{   //This is the class declaratiom

      public Account(){  // This is the constructor declaration
          // Constructor code is code to be executed as the object is created.
      }
    }
  

The default constructor

If a class contains no constructor declarations, then a default constructor is implictly declared.

This constructor has no parameters, and is often called the no-args (no arguments) constructor.

If a class contains any other constructor declarations, then a default constructor is NOT implicitly declared




The purpose of the constructor is, to essentially initialize the object that we´re creating, and do whatever else we need to happen,
while the object is being instantiated.



    

    


    






