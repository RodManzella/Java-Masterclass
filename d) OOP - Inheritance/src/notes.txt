What is object oriented programming

    - Object oriented programming is a way to model real world objects, as software objects, which contain both data and code.

    - OOP is a common acronym for Object Oriented programming

Class-based programming

    - Class-based programming starts with classes, which become blueprints for objects.


State and Behaviour

    - Now, real world objects have two major coomponents: (state and behaviour)

    - State, in terms of a computer object, might be: The amout of RAM it has, the operating system it´s running, the hard drive size.

    - These are characteristics about the item, that can describe it.

    - Behaviour(computer): In addition to state, objects may also have a behaviour, or actions that can be performed by the object or upon the
      object. Behaviour, for a computer, might be things like: booting up, shuting down, outputing some form of sound, drawing something on the
      screen and so son.

    - So modelling real world objects as software objects, is a fundamental part of Object Oriented Programming.

    - Now, a software object stores its state in fields, which can also be called variables, or attributes.

    - And objects expose their behaviour with methods, which we-ve talked about before.

    - So, where does a class fit in?

    - Well, think of a class as a template, or blueprint for creating objects.

The class as the blueprint

    - The class describes the data(fields), and the behaviour (methods), that are relevant to the real world object we want to describe.

    - These are called class members.

    - A class member can be a field, or a method, or some other type of dependant element.

    - If a field is static, there is only one copy in memory, and this value is associated with the class, or template itself.

    - If a field is not static, it´s called an instance field, and each object may have a different value stored for this field.

    - A static method can´t be dependant on any one object´s state, so it can´t reference any instance members.

    - In other words, any method that operates on instance fields, needs to be non-static.
------------------------------------------------------------------------------------------------------------------------------------------------

Organizing classes

    -Classes can be organized into logical groupings, which are called packages.

    -You declare a package name in the class using a package statement.

    -If you don´t declare a package, the class implicitly belongs to the default package.

    - You do need to understand that classes are grouped into packages, to understand acess modifiers.


Acess modifiers for the class

    - A class is said to be a top-level class, if it is defined in the souce code file, and not enclosed in the code block of another class,
    type, or method.

    - A top level class has only two valid acess valid modifier options: public, or none.
        
        public: public means any other class in any package can acess this class.

        (empty): When the acess modifier is omitted, this class has special meaning, called package acess, meaning that the class is
                 acessible only to classes in the same package.


Acess modifiers for class members

    - An acess modifier at member level, allows granular control over class members.

    - The valid acess modifiers are shown in this table from the least restrictive, to the most restrictive

        public: public means any other class in any package can acess this class.

        protected: protected allows classes in the same package, and any subclasses in other packages, to have acess to the member

        (omitted): When the modifier is omitted(not specified), this class has special meaning, called package acess, meaning the member
                   is acessible only to classes in the same package.

        private: private means that no other class can acess this member

    - As a general rule, all your fields should be private, unlike the class, where we´ll usually use public. So why would we want to make
      all the fields on a class private? Doesn´t this mean that nobody can acess them? This practice has a name, encapsulation, and it´s A
      key fundamental rule of Object Oriented Programming.


Encapsulation


    - Encapsulation in Object Oriented Programming usually has two meanings.

    - One is the bundling(empacotamento) of behaviour and attributes on a single object.

    - The other is the practice of hiding fields, and some methods, from public acess.

    - In general, when we´re talking about encapsulation, we´re talking about information hiding, or hiding the internal workings of a 
      particular object. When we make our attributes private, we can then create methods to acess the data, with different degrees of
      acess allowed, as needed.

    






